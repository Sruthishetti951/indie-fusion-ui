{"version":3,"file":"static/js/884.242ced98.chunk.js","mappings":"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","sources":["webpack://indie-fusion-ui/./src/LoginRegister/LoginRegister.module.css?409b","LoginRegister/LoginUI.jsx","LoginRegister/RegisterUI.jsx","LoginRegister/LoginRegister.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container-card\":\"LoginRegister_container-card__3GdR7\",\"login-card\":\"LoginRegister_login-card__oRend\",\"input-box\":\"LoginRegister_input-box__BTCH4\",\"btn-color\":\"LoginRegister_btn-color__l3W1e\",\"btn-link\":\"LoginRegister_btn-link__lk8Dg\",\"link\":\"LoginRegister_link__xpp94\"};","import axios from \"axios\";\nimport { Fragment, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { API_URL } from \"../appConfig\";\nimport styles from './LoginRegister.module.css';\n\nfunction LoginUI(props) {\n\n    const navigation = useNavigate();\n    const defaultValues = {\n        \"email\": \"\",\n        \"password\": \"\"\n    }\n    const { register, formState: { errors }, handleSubmit, reset } = useForm({\n        mode: \"onChange\",\n        defaultValues: defaultValues\n    });\n\n    const [loginStatus, setLoginStatus] = useState({\n        isLoading: false,\n        errorMessage: '',\n        successMessage: ''\n    })\n\n    const loginSubmitHandler = async (data) => {\n        setLoginStatus({\n            isLoading: true,\n            errorMessage: '',\n            successMessage: ''\n        })\n\n        try {\n            const response = await axios.post(`${API_URL}/login`, data)\n            if (response.data.data) {\n                setLoginStatus({\n                    isLoading: false,\n                    errorMessage: '',\n                    successMessage: 'User logged in successfully'\n                });\n                reset();\n                localStorage.setItem('USER_ID', response.data.data?._id);\n                localStorage.setItem('userName', response.data.data?.userName);\n                navigation('/profile');\n            } else {\n                setLoginStatus({\n                    isLoading: false,\n                    errorMessage: response.data.success,\n                    successMessage: ''\n                })\n            }\n\n        } catch (e) {\n            if (e?.response?.status === 404) {\n\n                setLoginStatus({\n                    isLoading: false,\n                    errorMessage: 'Invalid credentials... Please try again',\n                    successMessage: ''\n                })\n            } else {\n                setLoginStatus({\n                    isLoading: false,\n                    errorMessage: 'Something went wrong... Please try again',\n                    successMessage: ''\n                })\n            }\n        }\n\n    }\n\n    return (\n        <Fragment>\n            {(loginStatus.errorMessage || loginStatus.successMessage) && <div className={`alert ${loginStatus.errorMessage ? 'alert-danger' : 'alert-success'}  alert-dismissible fade show`} role=\"alert\">\n                {loginStatus.errorMessage}\n                {loginStatus.successMessage}\n            </div>}\n            <form onSubmit={handleSubmit(loginSubmitHandler)}>\n                <div>\n                    <label htmlFor=\"email\" >Email</label>\n                </div>\n                <div className=\"mb-3\">\n                    <input type=\"email\" id=\"email\" className={`${styles['input-box']}`}\n                        {\n                        ...register('email', {\n                            required: 'Email is required'\n                        },)\n                        } />\n                    <p className=\"text-danger\">{errors.email && errors.email.message}</p>\n                </div>\n\n                <div >\n                    <label htmlFor=\"pass\" >Password</label>\n                </div>\n                <div className=\"mb-3\">\n                    <input type=\"password\" id=\"pass\" className={`${styles['input-box']}`}\n                        {\n                        ...register('password', {\n                            required: 'Password is required'\n                        },)\n                        } />\n                    <p className=\"text-danger\">{errors.password && errors.password.message}</p>\n                    <p className='text-end mt-2'><Link to={'/forgot-password'}>Forgot Password? </Link></p>\n                </div>\n\n                <div className='text-center'>\n                    <button type=\"submit\" className={`btn btn-primary ${styles[\"btn-color\"]}`} disabled={loginStatus.isLoading}>{loginStatus.isLoading ? 'Loading...' : 'Login'}</button>\n\n                </div>\n\n\n                <div className=\"d-flex justify-content-center\">\n                    <p className='text-center mt-2'>Don't have an account? </p>\n                    <button type=\"button\" className={`nav-link mt-2 ${styles[\"link\"]}`} onClick={() => { props.registerHandler() }}>Register</button>\n                </div>\n\n            </form>\n        </Fragment>\n    )\n}\n\nexport default LoginUI","import axios from \"axios\";\nimport { Fragment, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { API_URL } from \"../appConfig\";\nimport styles from './LoginRegister.module.css';\n\nfunction RegisterUI(props) {\n    const defaultValues = {\n        \"firstName\": \"\",\n        \"lastName\": \"\",\n        \"userName\": \"\",\n        \"email\": \"\",\n        \"type\": \"USER\"\n    }\n    const { register, formState: { errors }, handleSubmit, reset } = useForm({\n        mode: \"onChange\",\n        defaultValues: defaultValues\n    });\n\n\n    const [registerStatus, setRegisterStatus] = useState({\n        isLoading: false,\n        errorMessage: '',\n        successMessage: ''\n    })\n\n    const registerSubmitHandler = async (data) => {\n        setRegisterStatus({\n            isLoading: true,\n            errorMessage: '',\n            successMessage: ''\n        })\n\n        const response = await axios.post(`${API_URL}/register`, data)\n        if (response.data.data) {\n            setRegisterStatus({\n                isLoading: false,\n                errorMessage: '',\n                successMessage: 'Registered successfully. Password is sent to your registered email'\n            });\n            reset();\n        } else {\n            setRegisterStatus({\n                isLoading: false,\n                errorMessage: response.data.success,\n                successMessage: ''\n            })\n        }\n    }\n\n    return (\n        <Fragment>\n            {(registerStatus.errorMessage || registerStatus.successMessage) && <div className={`alert ${registerStatus.errorMessage ? 'alert-danger' : 'alert-success'}  alert-dismissible fade show`} role=\"alert\">\n                {registerStatus.errorMessage}\n                {registerStatus.successMessage}\n            </div>}\n            <form onSubmit={handleSubmit(registerSubmitHandler)}>\n               \n                    <div>\n                        <label htmlFor=\"fname\" >First Name</label>\n                    </div>\n                    <div className=\"mb-3\">\n                        <input type=\"text\" id=\"fname\" className={`${styles['input-box']}`}\n                            {\n                            ...register('firstName', {\n                                required: 'First name is required'\n                            },)\n                            }\n                        />\n                        <p className=\"text-danger\">{errors.firstName && errors.firstName.message}</p>\n                    </div>\n               \n                    <div>\n                        <label htmlFor=\"lname\" >Last Name</label>\n                    </div>\n                    <div className=\"mb-3\">\n                        <input type=\"text\" id=\"lname\" className={`${styles['input-box']}`}\n                            {\n                            ...register('lastName', {\n                                required: 'Last name is required'\n                            },)\n                            } />\n                        <p className=\"text-danger\">{errors.lastName && errors.lastName.message}</p>\n                    </div>\n                \n                    <div>\n                        <label htmlFor=\"uname\">Username</label>\n                    </div>\n                    <div className=\"mb-3\">\n                        <input type=\"text\" id=\"uname\" className={`${styles['input-box']}`}\n                            {\n                            ...register('userName', {\n                                required: 'Username name is required'\n                            },)\n                            } />\n                        <p className=\"text-danger\">{errors.userName && errors.userName.message}</p>\n                    </div>\n               \n                    <div>\n                        <label htmlFor=\"email\" >Email</label>\n                    </div>\n                    <div className=\"mb-3\">\n                        <input type=\"email\" id=\"email\" className={`${styles['input-box']}`}\n                            {\n                            ...register('email', {\n                                required: 'Email is required',\n                                pattern:{\n                                    value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                                    message: 'Invalid email format',\n                                  },\n                            },)\n                            } />\n                        <p className=\"text-danger\">{errors.email && errors.email.message}</p>\n                    </div>\n                    <div className='text-center'>\n                        <button type=\"submit\" className={`btn btn-primary ${styles['btn-color']}`} disabled={registerStatus.isLoading}>{registerStatus.isLoading ? 'Loading...' : 'Register'}</button>\n                    </div>\n                \n                    <div className=\"d-flex justify-content-center\">\n                        <p className='text-center mt-2'>Already have an account? </p>\n                        <button className={`nav-link mt-2 ${styles[\"link\"]}`} onClick={() => { props.loginHandler() }}>Login</button>\n                    </div>\n               \n            </form>\n        </Fragment>\n    )\n}\n\nexport default RegisterUI","import { Fragment, useState } from 'react';\nimport styles from './LoginRegister.module.css';\nimport LoginUI from './LoginUI';\nimport RegisterUI from './RegisterUI';\n\nfunction LoginSignUp() {\n    const [isLogin, setIsLogin] = useState(true);\n\n    const registerHandler=()=>{\n        setIsLogin(false);\n    }\n\n    const loginHandler=()=>{\n        setIsLogin(true);\n    }\n\n    return (\n        <Fragment>\n            <div>\n                <div className={`container ${styles[\"container-card\"]}`}>\n                        <div className={`d-flex justify-content-center ${styles[\"login-card\"]}`}>\n                            <div>\n                                <div className='d-flex justify-content-around mb-5'>\n                                    <ul className=\"nav nav-pills nav-fill\">\n                                        <li className=\"nav-item\">\n                                            <button type=\"button\"  className={`nav-link ${isLogin ? styles['btn-color'] : ''}`}\n                                            onClick={()=>loginHandler()}>Login</button>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <button type=\"button\" className={`nav-link ${styles[\"btn-link\"]} ${!isLogin ? styles['btn-color'] : ''}`}\n                                            onClick={()=>registerHandler()}>Register</button>\n                                        </li>\n                                    </ul>\n                                </div>\n                                { isLogin ? <LoginUI registerHandler={registerHandler}/> : \n                                <RegisterUI loginHandler={loginHandler}/>}  \n                            </div>\n                        </div>\n                </div>\n            </div>\n        </Fragment>\n    );\n}\n\n\nexport default LoginSignUp;"],"names":["props","navigation","useNavigate","register","formState","errors","handleSubmit","reset","useForm","mode","defaultValues","loginStatus","setLoginStatus","useState","isLoading","errorMessage","successMessage","_jsxs","Fragment","children","className","role","onSubmit","async","response","axios","post","API_URL","data","_response$data$data","_response$data$data2","localStorage","setItem","_id","userName","success","e","_e$response","status","_jsx","htmlFor","type","id","styles","required","email","message","password","Link","to","disabled","onClick","registerHandler","registerStatus","setRegisterStatus","firstName","lastName","pattern","value","loginHandler","isLogin","setIsLogin","LoginUI","RegisterUI"],"sourceRoot":""}